= class Dir < Object
include Enumerable

ディレクトリの操作を行うためのクラスです。

== Class Methods
           
--- [](*pattern)                        -> [String]
#@if(version >= "1.8.0")
--- glob(pattern, flags = 0)                -> [String]
--- glob(pattern, flags = 0) {|file| ...}   -> nil
#@else
--- glob(pattern)                       -> [String]
--- glob(pattern) {|file| ...}          -> nil
#@end

ワイルドカードの展開を行い、
パターンにマッチするファイル名を文字列の配列として返します。
パターンにマッチするファイルがない場合は空の配列を返します。

ブロックが与えられたときはワイルドカードにマッチしたファイルを
引数にそのブロックを 1 つずつ評価して nil を返します

@param pattern パターンを文字列で指定します。
               パターンを "\0" で区切って 1 度に複数のパターンを指定することもで
               きます。
#@since 1.8.0
               パターンの区切りには "\0" のみ指定できます。
#@else
               パターンの区切りには "\0" 以外に、空白類(スペース、タブ、改行)でパターンを複数指定できます。
#@end
#@since 1.9.1
               配列を指定することで複数のパターンを指定できます。
#@end

#@since 1.8.0
@param flags [[m:File.fnmatch]] に指定できるフラグと同様のフラグを指定できます。
             このフラグを指定することでマッチの挙動を変更することができます。
//emlist{
  Dir.glob("*")                      #=> ["bar", "foo"]
  Dir.glob("*", File::FNM_DOTMATCH)  #=> [".", "..", "bar", "foo"]
//}
#@end

ワイルドカードには以下のものがあります。これらはバックスラッシュに
よりエスケープすることができます。ダブルクォートの文字列中では 2
重にエスケープする必要があることに注意してください。
ワイルドカードはデフォルトではファイル名の先頭の "." にマッチしません。

: *
    空文字列を含む任意の文字列と一致します。
: ?
    任意の一文字と一致します。
: [ ]
    鈎括弧内のいずれかの文字と一致します。- でつな
    がれた文字は範囲を表します。鈎括弧の中の最初の文字が
    ^ である時には含まれない文字と一致します。
    ^ の代わりに ksh や POSIX shell のように ! も同じ意
    味で使えます。
: { }
    コンマで区切られた文字列の組合せに展開します。例えば、
    foo{a,b,c} は fooa, foob, fooc 
    に展開されそれぞれに対してマッチ判定を行います。

    括弧は入れ子にすることができます。例えば、
    {foo,bar{foo,bar}} は foo, barfoo, barbar
    のそれぞれにマッチします。
: **/
    ワイルドカード */ の0回以上の繰り返しを意味し、
    ディレクトリを再帰的にたどってマッチを行います。
    例えば,
    foo/**/bar は foo/bar, foo/*/bar,
    foo/*/*/bar ... (以下無限に続く)に対してそれぞれ
    マッチ判定を行います。

例:

  # 一般的な例
  p Dir.glob("*")          #=> ["foo", "bar", "baz"]
  p Dir.glob("./b*")       #=> ["./bar", "./baz"]      先頭に "./" が付いている。
  p Dir.glob("*/")         #=> ["foo/"]                ディレクトリのみにマッチする。
  p Dir.glob("wrong_name") #=> []                      マッチしないと空の配列を返す。

  Dir.glob("b*") {|f| p f }
 
  #=> "bar"
      "baz"

  # 複数のパターンを指定する例
  p Dir.glob("f*\0b*")     # => ["foo", "bar"]
#@since 1.9.1
  p Dir.glob(["f*", "b*"]) # => ["foo", "bar"]
  p Dir["f*", "b*"]        # => ["foo", "bar"]
#@end

  # ワイルドカードの例
  Dir.glob("*")            #=> ["foo", "bar"]
  Dir.glob("fo?")          #=> ["foo"]
  Dir.glob("[^f]*")        #=> ["bar"]
  Dir.glob("{b,f}*")       #=> ["bar", "foo"]


--- chdir           -> 0
--- chdir(path)     -> 0
#@since 1.8.0
--- chdir {|path| ... }          -> object
--- chdir(path) {|path| ... }    -> object
#@end

カレントディレクトリを path に変更します。

path を省略した場合、環境変数 HOME または LOGDIR
が設定されていればそのディレクトリに移動します。
カレントディレクトリの変更に成功すれば 0 を返します。

#@since 1.8.0
ブロックが指定された場合、カレントディレクトリの変更はブロックの実行中に限
られます。ブロックの実行結果を返します。
#@end

@param path ディレクトリのパスを文字列で指定します。

@raise Errno::EXXX 失敗した場合に発生します。

例:

   Dir.chdir("/var/spool/mail")
   p Dir.pwd                    #=> "/var/spool/mail"
   Dir.chdir("/tmp") do
     p Dir.pwd                  #=> "/tmp"
   end 
   p Dir.pwd                    #=> "/var/spool/mail"

--- chroot(path)    -> 0

ルートディレクトリを path に変更します。

スーパーユーザだけがルートディレクトリを変更できます。
ルートディレクトリの変更に成功すれば 0 を返します。
各プラットフォームのマニュアルの chroot の項も参照して下さい。

@param path ディレクトリのパスを文字列で指定します。

@raise Errno::EXXX 失敗した場合に発生します。

例:

 p Dir.glob("*")   #=> ["file1", "file2]
 Dir.chroot("./")
 p Dir.glob("/*")  #=> ["/file1", "/file2]

@see [[url:http://opengroup.org/onlinepubs/007908799/xsh/chroot.html]]

--- delete(path)    -> 0
--- rmdir(path)     -> 0
--- unlink(path)    -> 0

ディレクトリを削除します。ディレクトリは空でなければいけませ
ん。ディレクトリの削除に成功すれば 0 を返します。

@param path ディレクトリのパスを文字列で指定します。

@raise Errno::EXXX 失敗した場合に発生します。

例:

  Dir.delete("/tmp/hoge-jbrYBh.tmp")

--- entries(path)    -> [String]

ディレクトリ path に含まれるファイルエントリ名の
配列を返します。

@param path ディレクトリのパスを文字列で指定します。

@raise Errno::EXXX 失敗した場合に発生します。

例:

  Dir.entries('.') #=> [".", "..", "bar", "foo"]

--- foreach(path) {|file| ...}    -> nil
#@since 1.8.7
#@since 1.8.8
--- foreach                       -> Enumerator
#@else
--- foreach                       -> Enumerable::Enumerator
#@end
#@end

ディレクトリ path の各エントリを表す文字列を引数として、ブロックを評価します。

#@since 1.8.7
ブロックが与えられなかった場合、各エントリを文字列として保持する
#@since 1.8.8
[[c:Enumerator]] オブジェクトを返します。
#@else
[[c:Enumerable::Enumerator]] オブジェクトを返します。
#@end
#@end

@param path ディレクトリのパスを文字列で指定します。

@raise Errno::EXXX 失敗した場合に発生します。

例:

  Dir.foreach('.'){|f|
    p f
  }
  #=> 
  "."
  ".."
  "bar"
  "foo"

--- getwd    -> String
--- pwd      -> String

カレントディレクトリのフルパスを文字列で返します。

@raise Errno::EXXX カレントディレクトリの取得に失敗した場合に発生します(が、普通は失敗することはありません)。

例:

   Dir.chdir("/tmp")   #=> 0
   Dir.getwd           #=> "/tmp"

--- mkdir(path, mode = 0777)    -> 0

path で指定された新しいディレクトリを作ります。パーミッションは
mode で指定された値に umask をかけた値 (mode & ~umask) になります。
[[man:mkdir(2)]] も参照して下さい。
ディレクトリの作成に成功すれば 0 を返します。

@param path ディレクトリのパスを文字列で指定します。

@param mode ディレクトリのモードを整数で与えます。

@raise Errno::EXXX ディレクトリの作成に失敗した場合に発生します。

例:

  p File.umask                                  #=> 2
  Dir.mkdir('t', 0666)
  p "%#o" % (07777 & File.stat('t').mode)  #=> "0664"

@see [[m:FileUtils.#makedirs]]

--- new(path)               -> Dir
--- open(path)              -> Dir
#@if (version >= "1.8.0")
--- open(path) {|dir| ...}  -> object
#@else
--- open(path) {|dir| ...}  -> nil
#@end

path に対するディレクトリストリームをオープンして返します。

ブロックを指定して呼び出した場合は、ディレクトリストリームを
引数としてブロックを実行します。ブロックの実行が終了すると、
ディレクトリは自動的にクローズされます。
#@since 1.8.0
ブロックの実行結果を返します。
#@end

@param path ディレクトリのパスを文字列で指定します。

@raise Errno::EXXX オープンに失敗した場合に発生します。


#@since 1.9.1
--- exist?(file_name)    -> bool
--- exists?(file_name)    -> bool

file_name で与えられたディレクトリが存在する場合に真を返します。
そうでない場合は、偽を返します。

@param file_name 存在を確認したいディレクトリ名。

  Dir.exist?(".")      # => true
  Dir.exists?(".")     # => true
  File.directory?(".") # => true

@see [[m:File.directory?]]

#@end

#@since 1.9.2
--- home          -> String | nil
--- home(user)    -> String | nil

現在のユーザまたは指定されたユーザのホームディレクトリを返します。

Dir.home や Dir.home("root") は
File.expand_path("~") や File.expand_path("~root") と
ほぼ同じです。

@see [[m:File.expand_path]]
#@end

== Instance Methods

--- close    -> nil

ディレクトリストリームをクローズします。以降のディレクトリに
対する操作は例外 [[c:IOError]] を発生させます。
クローズに成功すれば nil を返します。

@raise IOError close に失敗した場合に発生します。また既に自身が close している場合に発生します。

--- each {|item| ... }    -> self
#@since 1.8.8
--- each                  -> Enumerator
#@else
#@since 1.8.7
--- each                  -> Enumerable::Enumerator
#@end
#@end

ディレクトリの各エントリを表す文字列を引数として、ブロックを評価します。

#@since 1.8.7
ブロックが与えられなかった場合、各エントリを文字列として保持する
#@since 1.8.8
[[c:Enumerator]]
#@else
[[c:Enumerable::Enumerator]]
#@end
オブジェクトを返します。
#@end

@raise IOError 既に自身が close している場合に発生します。

例:

  Dir.open('.').each{|f|
    p f
  }
  #=> 
  "."
  ".."
  "bar"
  "foo"

#@since 1.8.0
--- path    -> String

オープンしているディレクトリのパス名を文字列で返します。

@raise IOError 既に自身が close している場合に発生します。
#@end

--- pos     -> Integer
--- tell    -> Integer

ディレクトリストリームの現在の位置を整数で返します。

@raise IOError 既に自身が close している場合に発生します。

例:

  Dir.open("/tmp") {|d|
    d.each {|f|
      p d.pos
    }
  }

--- pos=(pos)
--- seek(pos)    -> self

ディレクトリストリームの読み込み位置を pos に移動させます。
pos は [[m:Dir#tell]] で与えられた値でなければなりま
せん。

@param pos 変更したい位置を整数で与えます。

@raise IOError 既に自身が close している場合に発生します。

例:

   d = Dir.new("testdir")   #=> #<Dir:0x401b3c40>
   d.read                   #=> "."
   i = d.tell               #=> 12
   d.read                   #=> ".."
   d.seek(i)                #=> #<Dir:0x401b3c40>
   d.read                   #=> ".."

--- read    -> String | nil

ディレクトリストリームから次の要素を読み出して返します。最後の要素
まで読み出していれば nil を返します。

@raise Errno::EXXX ディレクトリの読み出しに失敗した場合に発生します。

@raise IOError 既に自身が close している場合に発生します。

--- rewind    -> self

ディレクトリストリームの読み込み位置を先頭に移動させます。

@raise IOError 既に自身が close している場合に発生します。

例:

   d = Dir.new("testdir")
   d.read     #=> "."
   d.rewind   #=> #<Dir:0x401b3fb0>
   d.read     #=> "."
