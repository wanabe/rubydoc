= module GC

GC は Ruby インタプリタの「ゴミ集め(Garbage Collection)」を制御
するモジュールです。

@see [[c:ObjectSpace]]

== Singleton Methods

--- disable -> bool

ガーベージコレクトを禁止します。

前回の禁止状態を返します(禁止されていたなら true, GC が有効であったなら、
false)。

@see [[m:GC.enable]]

--- enable -> bool

ガーベージコレクトを許可します。

前回の禁止状態を返します(禁止されていたなら true, GC が有効であったなら、
false)。

@see [[m:GC.disable]]

--- start -> nil

ガーベージコレクトを開始します。

[[m:GC#garbage_collect]] や [[m:ObjectSpace.#garbage_collect]] と同じ働きをします。
[[m:GC.disable]] により GC が禁止されている場合は何もしません。

nil を返します。

#@since 1.8.7
--- stress -> bool
--- stress=(value)

GC.stress が真に設定されている間は、GC を行えるすべての機会に GC を行います。

@param value 任意のオブジェクト。真偽値として解釈されます。
#@end

#@since 1.9.1
--- count -> Integer

プロセス開始からガーベージコレクトを実行した回数を [[c:Integer]] で返し
ます。
#@end

#@since 1.9.3
--- stat(result_hash = {}) -> {Symbol => Integer}

GC 内部の統計情報を [[c:Hash]] で返します。

@param result_hash 戻り値のためのハッシュを指定します。省略した場合は新
                   しくハッシュを作成します。result_hash の内容は上書き
                   されます。

@return GC 内部の統計情報を[[c:Hash]] で返します。

  GC.stat
  # =>
  {
    :count          => 18,
    :heap_used      => 77,
    :heap_length    => 77,
    :heap_increment => 0,
    :heap_live_num  => 23287,
    :heap_free_num  => 8115,
    :heap_final_num => 0,
  }

戻り値のハッシュは処理系に依存します。これは将来変更になるかもしれません。

本メソッドは C Ruby 以外では動作しません。
#@end

== Instance Methods

--- garbage_collect -> nil

ガーベージコレクトを開始します。

[[m:GC.start]] や [[m:ObjectSpace.#garbage_collect]] と同じ働きをします。
[[m:GC.disable]] により GC が禁止されている場合は何もしません。

nil を返します。
