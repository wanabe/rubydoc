= class Mutex < Object

Mutex(Mutal Exclusion = 相互排他ロック)は共有データを並行アクセスから保護する
ためにあります。Mutex の典型的な使い方は(m を Mutex オブジェクトとします):

  m.lock
  begin
    # m によって保護されたクリティカルセクション
  ensure
    m.unlock
  end

または、より簡単に

  m.synchronize {
    # m によって保護されたクリティカルセクション
  }

== Class Methods

--- new -> Mutex
新しい mutex を生成して返します。

== Instance Methods

#@until 1.9.1
--- exclusive_unlock { ... } -> self | nil
ロックを解放し、ロック待ちになっているスレッドを実行可能状態に
した後、ブロックを実行します。

ブロックの実行が終了するまで、スレッドは切り替わりません。

@return self がロックされていなければ nil を返します。そうでなければself を返します。
#@end

--- lock -> self
mutex オブジェクトをロックします。一度に一つのス
レッドだけが mutex をロックできます。既にロックされている mutex
に対してロックを行おうとしたスレッドは mutex のロックが解放さ
れるまで、実行が停止されます。


--- locked? -> bool
mutex がロックされている時、真を返します。

--- synchronize { ... } -> object

mutex をロックし、ブロックを実行します。実行後に必ず mutex のロックを解放します。

ブロックが最後に評価した値を返します。

--- try_lock -> bool
mutex をロックしようとして、ロックが成功した場合、真を返します。
ロックできなかった場合にはブロックせず偽を返します。

--- unlock     -> self | nil
mutex のロックを解放します。mutex のロック待ちになっていたスレッドの実行は再開されます。

@return self がロックされていなければ nil を返します。そうでなければself を返します。

例:

 m = Mutex.new
 begin 
   m.lock
   # critical part
 ensure
   m.unlock
 end

#@since 1.9.1
Mutex はロックしたスレッド以外からロックを開放することは出来ません。
ロックしたスレッド以外から unlock が呼ばれると ThreadError が発生します。

 m = Mutex.new
 m.lock
 Thread.new do
   m.unlock # => ThreadError
 end.join

@raise ThreadError 自身をロックしたスレッド以外から呼ばれた場合に発生します。
#@end

#@since 1.9.1
--- sleep(timeout = nil)    -> self

与えられた秒数の間スリープしてからロックを解放します。

@param timeout スリープする秒数を指定します。省略するとスリープし続けます。

@raise ThreadError 自身がカレントスレッドによってロックされていない場合に発生します。
#@end
