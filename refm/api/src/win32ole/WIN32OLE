= class WIN32OLE < Object

OLEオートメーションオブジェクトをRubyで操作するためのクラスです。

Windowsの多くのアプリケーションやライブラリは、COMと呼ばれるAPI群を利用して他のプログラムから操作できます。WIN32OLEがサポートしているのは、COMのAPIのうち、特にインタープリタ用のインターフェイスであるOLEオートメーション（IDispatchインターフェイス）とそれに付随するリフレクション用のインターフェイスです。

これらのインターフェイスをサポートしている代表的なWindowsアプリケーションに、Office、IE、iTunes、Illustratorがあります。また、WMI、WshShellなどのライブラリを利用してWindowsの情報を操作することも可能です。

=== サンプルコード

  require 'win32ole'

  excel = WIN32OLE.new('Excel.Application')
  workbook = excel.Workbooks.Open('workbook.xls')
  workbook.PrintOut
  workbook.Close(:SaveChanges => false)
  excel.Quit

== Class Methods

#@since 1.9.1

--- create_guid -> String

GUID(グローバル一意識別子：Global Unique Identifier)を生成します。

GUIDは、COMのクラス識別子(CLSID)、インターフェイス識別子(IID)など多数の領域でWindows上のオブジェクトの識別に利用される128ビットの値です。

WIN32OLEが生成するGUIDは以下の形式によるGUIDの文字列表現です。なお00〜FFはGUIDの先頭からのバイト位置を示します。これはレジストリのキーとして利用される形式です。

  {33221100-5544-7766-8899-AABBCCDDEEFF}

@return GUIDの文字列表現を返します。

   WIN32OLE.create_guid   # => "{????????-????-????-????-????????????}"

--- locale -> Fixnum

WIN32OLEがオートメーション呼び出し時に設定するロケール識別子(LCID)を取得します。

OLEオートメーションでは、UNIXで利用される"ja_JP"などの国名と言語名を「_」で接続した文字列ではなく、32ビット整数で示します。32ビットの内訳は上位16ビットが予約領域で0、下位16ビットが言語ID(LANGID）です。LANGIDは、0〜9ビットでプライマリ言語ID、10〜15ビットでサブ言語IDを示します。

ロード時の既定値は[[m:WIN32OLE::LOCALE_SYSTEM_DEFAULT]]です。

@return WIN32OLEがオートメーション呼び出し時に設定するロケール識別子(LCID)を返します。

   lcid = WIN32OLE.locale

--- locale=(lcid)

WIN32OLEがオートメーション呼び出し時に設定するロケール識別子(LCID)を設定します。

OLEオートメーションでは、UNIXで利用される"ja_JP"などの国名と言語名を「_」で接続した文字列ではなく、32ビット整数で示します。32ビットの内訳は上位16ビットが予約領域で0、下位16ビットが言語ID(LANGID）です。LANGIDは、0〜9ビットでプライマリ言語ID、10〜15ビットでサブ言語IDを示します。

@param lcid 新たに設定するロケール識別子を整数で指定します。
@raise WIN32OLERuntimeError システムにインストールされていないロケールを指定すると発生します。

   WIN32OLE.locale = 1033 # set locale English(U.S)
   obj = WIN32OLE_VARIANT.new("$100,000", WIN32OLE::VARIANT::VT_CY)

オブジェクトがサポートしていないロケールを設定した場合、オブジェクトのメソッド呼び出し時にDISP_E_UNKNOWNLCID(HRESULT error code:0x8002000C)や、TYPE_E_INVDATAREAD(HRESULT error code:0x80028018)などを理由としたWIN32OLERuntimeError例外となります。ほとんどすべての場合において、既定値を変更する必要はありません。

#@end

--- codepage
#@todo

Returns current codepage.

   WIN32OLE.codepage   # => WIN32OLE::CP_ACP

--- codepage=(cp)
#@todo

Sets current codepage.

   WIN32OLE.codepage = WIN32OLE::CP_UTF8

--- connect(ole) -> WIN32OLE
#@todo

Returns running OLE Automation object or WIN32OLE object from
moniker. 1st argument should be OLE program id or class id or
moniker.

   WIN32OLE.connect('Excel.Application') # => WIN32OLE object which represents running Excel.

--- const_load(ole, mod = WIN32OLE)
#@todo

Defines the constants of OLE Automation server as mod's constants.
The first argument is WIN32OLE object or type library name. If
2nd argument is omitted, the default is WIN32OLE. The first letter
of Ruby's constant variable name is upper case, so constant variable
name of WIN32OLE object is capitalized. For example, the 'xlTop'
constant of Excel is changed to 'XlTop' in WIN32OLE. If the first
letter of constant variabl is not [A-Z], then the constant is
defined as CONSTANTS hash element.

   module EXCEL_CONST
   end
   excel = WIN32OLE.new('Excel.Application')
   WIN32OLE.const_load(excel, EXCEL_CONST)
   puts EXCEL_CONST::XlTop # => -4160
   puts EXCEL_CONST::CONSTANTS['_xlDialogChartSourceData'] # => 541

   WIN32OLE.const_load(excel)
   puts WIN32OLE::XlTop # => -4160

   module MSO
   end
   WIN32OLE.const_load('Microsoft Office 9.0 Object Library', MSO)
   puts MSO::MsoLineSingle # => 1

--- new(server, host=nil) -> WIN32OLE object
#@todo

Returns a new WIN32OLE object(OLE Automation object). The first
argument server specifies OLE Automation server. The first argument
should be CLSID or PROGID. If second argument host specified,
then returns OLE Automation object on host.

    WIN32OLE.new('Excel.Application') # => Excel OLE Automation WIN32OLE object.
    WIN32OLE.new('{00024500-0000-0000-C000-000000000046}') # => Excel OLE Automation WIN32OLE object.

--- ole_free(aWIN32OLE) -> number
#@todo

Invokes Release method of Dispatch interface of WIN32OLE object.
You should not use this method because this method exists only
for debugging WIN32OLE. The return value is reference counter
of OLE object.

--- ole_reference_count(aWIN32OLE) -> number
#@todo

Returns reference counter of Dispatch interface of WIN32OLE object.
You should not use this method because this method exists only
for debugging WIN32OLE.

--- ole_show_help(obj, helpcontext = nil)
#@todo

Displays helpfile. The 1st argument specifies WIN32OLE_TYPE object
or WIN32OLE_METHOD object or helpfile.

   excel = WIN32OLE.new('Excel.Application')
   typeobj = excel.ole_type
   WIN32OLE.ole_show_help(typeobj)

== Instance Methods

--- [](property)
#@todo

Returns property of OLE object.

   excel = WIN32OLE.new('Excel.Application')
   puts excel['Visible'] # => false

--- _getproperty(dispid, args, types)
#@todo

Runs the early binding method to get property. The 1st argument
specifies dispatch ID, the 2nd argument specifies the array of
arguments, the 3rd argument specifies the array of the type of
arguments.

   excel = WIN32OLE.new('Excel.Application')
   puts excel._getproperty(558, [], []) # same effect as puts excel.visible

--- _invoke(dispid, args, types)
#@todo

Runs the early binding method. The 1st argument specifies dispatch
ID, the 2nd argument specifies the array of arguments, the 3rd
argument specifies the array of the type of arguments.

   excel = WIN32OLE.new('Excel.Application')
   excel._invoke(302, [], []) #  same effect as excel.Quit

--- _setproperty(dispid, args, types)
#@todo

Runs the early binding method to set property. The 1st argument
specifies dispatch ID, the 2nd argument specifies the array of
arguments, the 3rd argument specifies the array of the type of
arguments.

   excel = WIN32OLE.new('Excel.Application')
   excel._setproperty(558, [true], [WIN32OLE::VARIANT::VT_BOOL]) # same effect as excel.visible = true

--- each {|i|...}
#@todo

Iterates over each item of OLE collection which has IEnumVARIANT
interface.

   excel = WIN32OLE.new('Excel.Application')
   book = excel.workbooks.add
   sheets = book.worksheets(1)
   cells = sheets.cells("A1:A5")
   cells.each do |cell|
     cell.value = 10
   end

--- invoke(method, *args)  -> return value of method.
#@todo

Runs OLE method. The first argument specifies the method name
of OLE Automation object. The others specify argument of the
method. If you can not execute method directly, then use this
method instead.

  excel = WIN32OLE.new('Excel.Application')
  excel.invoke('Quit')  # => same as excel.Quit

--- method_missing(id, *args)
#@todo

Calls WIN32OLE#invoke method.

--- ole_activex_initialize -> Qnil
#@todo

Initialize WIN32OLE object(ActiveX Control) by calling IPersistMemory::InitNew.

Before calling OLE method, some kind of the ActiveX controls
created with MFC should be initialized by calling IPersistXXX::InitNew.

If and only if you recieved the exception "HRESULT error code:
0x8000ffff catastrophic failure", try this method before invoking
any ole_method.

   obj = WIN32OLE.new("ProgID_or_GUID_of_ActiveX_Control")
   obj.ole_activex_initialize
   obj.method(...)

--- ole_free
#@todo

invokes Release method of Dispatch interface of WIN32OLE object.
Usually, you do not need to call this method because Release
method called automatically when WIN32OLE object garbaged.

--- ole_func_methods
#@todo

Returns the array of WIN32OLE_METHOD object . The element of
the array is functional method of WIN32OLE object.

   excel = WIN32OLE.new('Excel.Application')
   properties = excel.ole_func_methods

--- ole_get_methods
#@todo

Returns the array of WIN32OLE_METHOD object . The element of
the array is property (gettable) of WIN32OLE object.

   excel = WIN32OLE.new('Excel.Application')
   properties = excel.ole_get_methods

--- ole_method_help(method)
#@todo
alias ole_method_help

Returns WIN32OLE_METHOD object corresponding with method specified
by 1st argument.

   excel = WIN32OLE.new('Excel.Application')
   method = excel.ole_method_help('Quit')

--- ole_method_help(method)
#@todo
alias ole_method_help

Returns WIN32OLE_METHOD object corresponding with method specified
by 1st argument.

   excel = WIN32OLE.new('Excel.Application')
   method = excel.ole_method_help('Quit')

--- ole_methods
#@todo

Returns the array of WIN32OLE_METHOD object. The element is OLE
method of WIN32OLE object.

   excel = WIN32OLE.new('Excel.Application')
   methods = excel.ole_methods

--- ole_obj_help
#@todo

Returns WIN32OLE_TYPE object.

   excel = WIN32OLE.new('Excel.Application')
   tobj = excel.ole_obj_help

--- ole_put_methods
#@todo

Returns the array of WIN32OLE_METHOD object . The element of
the array is property (settable) of WIN32OLE object.

   excel = WIN32OLE.new('Excel.Application')
   properties = excel.ole_put_methods

--- []=(property, val)
--- setproperty('property', [arg1, arg2,...] val)
#@todo

Sets property of OLE object. When you want to set property with
argument, you can use this method.

   excel = WIN32OLE.new('Excel.Application')
   excel['Visible'] = true
   book = excel.workbooks.add
   sheet = book.worksheets(1)
   sheet.setproperty('Cells', 1, 2, 10) # => The B1 cell value is 10.

#@since 1.9.1

--- ole_query_interface(iid) -> WIN32OLE object
#@todo

Returns WIN32OLE object for a specific dispatch or dual interface
specified by iid.

    ie = WIN32OLE.new('InternetExplorer.Application')
    ie_web_app = ie.ole_query_interface('{0002DF05-0000-0000-C000-000000000046}') # => WIN32OLE object for dispinterface IWebBrowserApp

--- ole_type
#@todo
alias ole_obj_help

Returns WIN32OLE_TYPE object.

   excel = WIN32OLE.new('Excel.Application')
   tobj = excel.ole_type

--- ole_typelib -> The WIN32OLE_TYPELIB object 
#@todo

Returns the WIN32OLE_TYPELIB object. The object represents the
type library which contains the WIN32OLE object.

   excel = WIN32OLE.new('Excel.Application')
   tlib = excel.ole_typelib
   puts tlib.name  # -> 'Microsoft Excel 9.0 Object Library'

#@end

== Constants
--- VERSION  -> String

Major.Minor.Patch形式のWIN32OLEのバージョン番号を示す文字列です。

--- ARGV -> Array

直前のメソッド呼び出しの引数を格納した配列です。

OLEオートメーションでは呼び出し先が引数に対して値を設定できます。しかし、Rubyのメソッド引数は値のみを取るため、そのままでは呼び出し先が設定した値を参照できません。このような場合、ARGVを参照することで呼び出し先の設定値を参照できます。

以下のリストは、VBで開発したオブジェクトのメソッド呼び出しを例としています。このメソッド（Accm）は、第1引数で指定した演算を第2引数と第3引数に適用し、結果を第2引数に設定します。

  ' VB (OLE Automation server)
  Public Sub Accm(ByVal Operator, ByRef Accumulator, ByVal Operand)
      If Operator = "*" Then
          Accmulator = Accmulator * Operand
      Else If Operator = "+" Then
          Accmulator = Accmulator + Operand
      End If
  End Sub
 
  # Ruby
  x = 10
  obj.Accm '*', x, 11
  p x               # -> 10 …… 呼び出しによって影響を受けない
  p WIN32OLE::ARGV  # -> ['*', 110, 11] …… 結果はARGVの対応する引数に反映される
  obj.Accm '+', 10, 11
  p WIN32OLE::ARGV  # -> ['+', 21, 11]

直前のメソッド呼び出しが例外となった場合、ARGVの設定内容は呼び出し前の状態が保たれます。つまり、WIN32OLE自身がARGVの内容を消去するのは、メソッド呼び出しに成功した場合のみです。このため最後のメソッド呼び出しが引数にオブジェクトを返すタイプのメソッドだった場合、GCにオブジェクトを回収させるために、呼び出し側でARGVを消去してください。

  ' VB (OLE Automation server)
  Public Sub GetInterface(ByRef obj)
      Set Obj = New OleObject
  End Sub

  # Ruby
  obj.GetInterface nil   # 引数の数を合わせるためダミー引数を指定
  WIN32OLE::ARGV.clear   # 通常は、後続のメソッド呼び出しによって消去される

--- CP_ACP
--- CP_MACCP
--- CP_OEMCP
--- CP_SYMBOL
--- CP_THREAD_ACP
--- CP_UTF7
--- CP_UTF8

--- LOCALE_SYSTEM_DEFAULT  -> Fixnum

システム既定のロケールを示すLCID(0x0800)です。WIN32OLEがオートメーションを利用する場合の既定値です。

--- LOCALE_USER_DEFAULT  -> Fixnum

ユーザ既定のロケールを示すLCID(0x0400)です。
